// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define typeof(type)
#define __ctor_all(RefClass, NativeClass) __ctor(RefClass, NativeClass); internal: __ctor_copy(RefClass, NativeClass); __ctor_move(RefClass, NativeClass); public:
#define __ctor_default(RefClass, NativeClass) RefClass() : ClassTemplate((void*)nullptr, false) { }
#define __ctor(RefClass, NativeClass) RefClass(nint_t p) : ClassTemplate(p) { } RefClass(nint_t p, bool ownsNativeInstance) : ClassTemplate(p, ownsNativeInstance) { } RefClass(NativeClass* p) : ClassTemplate(p) { } RefClass(NativeClass* p, bool ownsNativeInstance) : ClassTemplate(p, ownsNativeInstance) { } RefClass(void* p) : ClassTemplate(p) { } RefClass(void* p, bool ownsNativeInstance) : ClassTemplate(p, ownsNativeInstance) { }
#define __ctor_copy(RefClass, NativeClass) RefClass(NativeClass& r) : ClassTemplate(r) { }
#define __ctor_move(RefClass, NativeClass) RefClass(NativeClass&& m) : ClassTemplate(m) { }
#define LLNET_DEFAULT_EXCEPTION_MESSAGE "Uncaught {0} detected!"
#define CATCH catch (System::Exception ^ ex) { GlobalClass::logger->error->WriteLine(LLNET_DEFAULT_EXCEPTION_MESSAGE, ex->GetType()->ToString()); GlobalClass::logger->error->WriteLine(ex->ToString()); } catch (...) { GlobalClass::logger->error->WriteLine(LLNET_DEFAULT_EXCEPTION_MESSAGE, "exception"); }
#define NULL_ARG_CHECK(arg) if (ReferenceEquals(arg, nullptr)) throw gcnew ::System::ArgumentNullException(#arg, "Cannot be null.");
#define VALUE_TUPLE System::ValueTuple
#define __ref_class public ref class
#define __static abstract sealed
#define __default_param(obj) [DefaultParameterValue(obj)]
#define __as dynamic_cast
#define typeof(type) type::typeid
#define GET_MODULE(asm) GlobalClass::GetCurrentModule(asm)
#define CALLING_MODULE GET_MODULE(Assembly::GetCallingAssembly())