// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define __ctor_ex(RefClass, BaseClass, NativeClass) RefClass(System::IntPtr p) : BaseClass(p) { } RefClass(System::IntPtr p, bool ownsNativeInstance) : BaseClass(p, ownsNativeInstance) { } RefClass(NativeClass* p) : BaseClass(p) { } RefClass(NativeClass* p, bool ownsNativeInstance) : BaseClass(p, ownsNativeInstance) { } RefClass(void* p) : BaseClass(p) { } RefClass(void* p, bool ownsNativeInstance) : BaseClass(p, ownsNativeInstance) { }
#define __ctor_all(RefClass, NativeClass) __ctor(RefClass, NativeClass); internal: __ctor_copy(RefClass, NativeClass); __ctor_move(RefClass, NativeClass); public:
#define Property(type, nativeName, name) property type name { inline type get() { return _this->nativeName; } inline void set(type arg) { _this->nativeName = arg; } }
#define Property(type, nativeName, name) property type name { inline type get() { return this->NativePtr->nativeName; } inline void set(type arg) { this->NativePtr->nativeName = arg; } }
#define Property_String(nativeName, name) property String^ name { inline String^ get() { return marshalString(_this->nativeName); } inline void set(String^ arg) { _this->nativeName = marshalString(arg); } }
#define Property_String(nativeName, name) property String^ name { inline String^ get() { return marshalString(this->NativePtr->nativeName); } inline void set(String^ arg) { this->NativePtr->nativeName = marshalString(arg); } }
#define Property_Ptr(Namespace, type, nativeName, name) property Namespace::type ^ name { inline Namespace::type ^ get() { return gcnew Namespace::type(_this->nativeName); } inline void set(Namespace::type ^ arg) { _this->nativeName = arg->NativePtr; } }
#define Property_Ptr(Namespace, type, nativeName, name) property Namespace::type ^ name { inline Namespace::type ^ get() { return gcnew Namespace::type(this->NativePtr->nativeName); } inline void set(Namespace::type ^ arg) { this->NativePtr->nativeName = arg->NativePtr; } }
